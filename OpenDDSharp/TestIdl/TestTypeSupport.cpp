//------------------------------------------------------------------------------
// <auto-generated>
// WARNING: THIS FILE IS AUTO-GENERATED. DO NOT MODIFY.
// DDS version: 3.13
// ACE version: 6.2a_p15
// Running on input file: Test.idl
// </auto-generated>
//------------------------------------------------------------------------------

#include "TestTypeSupport.h"

OpenDDSharp::Test::BasicTestStruct::BasicTestStruct() {
    m_Id = 0;
}

System::Int32 OpenDDSharp::Test::BasicTestStruct::Id::get() {
    return m_Id;
}

void OpenDDSharp::Test::BasicTestStruct::Id::set(System::Int32 value) {
    m_Id = value;
}

::Test::BasicTestStruct OpenDDSharp::Test::BasicTestStruct::ToNative() {
    ::Test::BasicTestStruct ret;
    msclr::interop::marshal_context context;

    ret.Id = m_Id;

    return ret;
}

void  OpenDDSharp::Test::BasicTestStruct::FromNative(::Test::BasicTestStruct native) {
    m_Id = native.Id;
}

///////////////////////////////////////////////////////////////////////

OpenDDSharp::Test::BasicTestStructTypeSupport::BasicTestStructTypeSupport() {
	impl_entity = new ::Test::BasicTestStructTypeSupportImpl();
};

System::String^ OpenDDSharp::Test::BasicTestStructTypeSupport::GetTypeName() {
	return context.marshal_as<System::String^>(impl_entity->get_type_name());
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::Test::BasicTestStructTypeSupport::RegisterType(::OpenDDSharp::DDS::DomainParticipant^ participant, System::String^ typeName) {
    const char * type_name = context.marshal_as<const char*>(typeName);
    ::DDS::DomainParticipant_ptr dp = participant->impl_entity;
	return (OpenDDSharp::DDS::ReturnCode)impl_entity->register_type(dp, type_name);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::Test::BasicTestStructTypeSupport::UnregisterType(::OpenDDSharp::DDS::DomainParticipant^ participant, System::String^ typeName) {
	return (OpenDDSharp::DDS::ReturnCode)impl_entity->unregister_type(participant->impl_entity, context.marshal_as<const char*>(typeName));
};

///////////////////////////////////////////////////////////////////////

OpenDDSharp::Test::BasicTestStructDataWriter::BasicTestStructDataWriter(::OpenDDSharp::DDS::DataWriter^ dataWriter) : OpenDDSharp::DDS::DataWriter(dataWriter->impl_entity) {
	impl_entity = ::Test::BasicTestStructDataWriter::_narrow(dataWriter->impl_entity);
};

OpenDDSharp::DDS::InstanceHandle OpenDDSharp::Test::BasicTestStructDataWriter::RegisterInstance(BasicTestStruct^ instance) {
	return impl_entity->register_instance(instance->ToNative());
};

OpenDDSharp::DDS::InstanceHandle OpenDDSharp::Test::BasicTestStructDataWriter::RegisterInstance(BasicTestStruct^ instance, OpenDDSharp::DDS::Timestamp timestamp) {
    ::DDS::Time_t time;	
	time.sec = timestamp.Seconds;
	time.nanosec = timestamp.NanoSeconds;

	return impl_entity->register_instance_w_timestamp(instance->ToNative(), time);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::Test::BasicTestStructDataWriter::UnregisterInstance(BasicTestStruct^ data) {
	return (OpenDDSharp::DDS::ReturnCode)impl_entity->unregister_instance(data->ToNative(), ::DDS::HANDLE_NIL);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::Test::BasicTestStructDataWriter::UnregisterInstance(BasicTestStruct^ data, OpenDDSharp::DDS::InstanceHandle handle) {
	return (OpenDDSharp::DDS::ReturnCode)impl_entity->unregister_instance(data->ToNative(), handle);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::Test::BasicTestStructDataWriter::UnregisterInstance(BasicTestStruct^ data, OpenDDSharp::DDS::InstanceHandle handle, OpenDDSharp::DDS::Timestamp timestamp) {
	::DDS::Time_t time;
	time.sec = timestamp.Seconds;
	time.nanosec = timestamp.NanoSeconds;

	return (OpenDDSharp::DDS::ReturnCode)impl_entity->unregister_instance_w_timestamp(data->ToNative(), handle, time);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::Test::BasicTestStructDataWriter::Write(BasicTestStruct^ data) {
	return (OpenDDSharp::DDS::ReturnCode)impl_entity->write(data->ToNative(), ::DDS::HANDLE_NIL);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::Test::BasicTestStructDataWriter::Write(BasicTestStruct^ data, OpenDDSharp::DDS::InstanceHandle handle) {
	return (OpenDDSharp::DDS::ReturnCode)impl_entity->write(data->ToNative(), handle);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::Test::BasicTestStructDataWriter::Write(BasicTestStruct^ data, OpenDDSharp::DDS::InstanceHandle handle, OpenDDSharp::DDS::Timestamp timestamp) {
	::DDS::Time_t time;
	time.sec = timestamp.Seconds;
	time.nanosec = timestamp.NanoSeconds;

	return (OpenDDSharp::DDS::ReturnCode)impl_entity->write_w_timestamp(data->ToNative(), handle, time);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::Test::BasicTestStructDataWriter::Dispose(BasicTestStruct^ data) {
	return (OpenDDSharp::DDS::ReturnCode)impl_entity->dispose(data->ToNative(), ::DDS::HANDLE_NIL);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::Test::BasicTestStructDataWriter::Dispose(BasicTestStruct^ data, OpenDDSharp::DDS::InstanceHandle handle) {
	return (OpenDDSharp::DDS::ReturnCode)impl_entity->dispose(data->ToNative(), handle);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::Test::BasicTestStructDataWriter::Dispose(BasicTestStruct^ data, OpenDDSharp::DDS::InstanceHandle handle, OpenDDSharp::DDS::Timestamp timestamp) {
	::DDS::Time_t time;
	time.sec = timestamp.Seconds;
	time.nanosec = timestamp.NanoSeconds;

	return (OpenDDSharp::DDS::ReturnCode)impl_entity->dispose_w_timestamp(data->ToNative(), handle, time);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::Test::BasicTestStructDataWriter::GetKeyValue(BasicTestStruct^ data, OpenDDSharp::DDS::InstanceHandle handle) {
	return (OpenDDSharp::DDS::ReturnCode)impl_entity->get_key_value(data->ToNative(), handle);
};

System::Int32 OpenDDSharp::Test::BasicTestStructDataWriter::LookupInstance(BasicTestStruct^ instance) {
	return impl_entity->lookup_instance(instance->ToNative());
};

///////////////////////////////////////////////////////////////////////

OpenDDSharp::Test::BasicTestStructDataReader::BasicTestStructDataReader(::OpenDDSharp::DDS::DataReader^ dataReader) : OpenDDSharp::DDS::DataReader(dataReader->impl_entity) {
	impl_entity = ::Test::BasicTestStructDataReader::_narrow(dataReader->impl_entity);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::Test::BasicTestStructDataReader::Read(List<BasicTestStruct^>^ receivedData, List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo) {
	return OpenDDSharp::Test::BasicTestStructDataReader::Read(receivedData, receivedInfo, ::DDS::LENGTH_UNLIMITED, OpenDDSharp::DDS::SampleStateKind::NotReadSampleState, OpenDDSharp::DDS::ViewStateMask::AnyViewState, OpenDDSharp::DDS::InstanceStateMask::AnyInstanceState);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::Test::BasicTestStructDataReader::Read(List<BasicTestStruct^>^ receivedData, List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo, System::Int32 maxSamples) {
	return OpenDDSharp::Test::BasicTestStructDataReader::Read(receivedData, receivedInfo, maxSamples, OpenDDSharp::DDS::SampleStateKind::NotReadSampleState, OpenDDSharp::DDS::ViewStateMask::AnyViewState, OpenDDSharp::DDS::InstanceStateMask::AnyInstanceState);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::Test::BasicTestStructDataReader::Read(List<BasicTestStruct^>^ receivedData, List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo, System::Int32 maxSamples, OpenDDSharp::DDS::ReadCondition^ condition) {
	if (condition == nullptr) {
		return OpenDDSharp::DDS::ReturnCode::BadParameter;
	}

	return OpenDDSharp::Test::BasicTestStructDataReader::Read(receivedData, receivedInfo, maxSamples, condition->SampleStateMask, condition->ViewStateMask, condition->InstanceStateMask);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::Test::BasicTestStructDataReader::Read(List<BasicTestStruct^>^ receivedData, List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo, System::Int32 maxSamples, OpenDDSharp::DDS::SampleStateMask sampleStates, OpenDDSharp::DDS::ViewStateMask viewStates, OpenDDSharp::DDS::InstanceStateMask instanceStates) {
    if (receivedData == nullptr || receivedInfo == nullptr) {
		return OpenDDSharp::DDS::ReturnCode::BadParameter;
	}

    receivedData->Clear();
	receivedInfo->Clear();
    
	::Test::BasicTestStructSeq received_data;
	::DDS::SampleInfoSeq info_seq;
	::DDS::ReturnCode_t ret = impl_entity->read(received_data, info_seq, maxSamples, sampleStates, viewStates, instanceStates);

	if (ret == ::DDS::RETCODE_OK) {
		for (unsigned int i = 0; i < received_data.length(); i++) {
			BasicTestStruct^ data = gcnew BasicTestStruct();
			::OpenDDSharp::DDS::SampleInfo^ sampleInfo = gcnew ::OpenDDSharp::DDS::SampleInfo();

			data->FromNative(received_data[i]);
			sampleInfo->FromNative(info_seq[i]);

			receivedData->Add(data);
			receivedInfo->Add(sampleInfo);
		}
	}

    impl_entity->return_loan(received_data, info_seq);

	return (OpenDDSharp::DDS::ReturnCode)ret;
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::Test::BasicTestStructDataReader::Take(List<BasicTestStruct^>^ receivedData, List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo) {
	return OpenDDSharp::Test::BasicTestStructDataReader::Take(receivedData, receivedInfo, ::DDS::LENGTH_UNLIMITED, OpenDDSharp::DDS::SampleStateMask::AnySampleState, OpenDDSharp::DDS::ViewStateMask::AnyViewState, OpenDDSharp::DDS::InstanceStateMask::AnyInstanceState);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::Test::BasicTestStructDataReader::Take(List<BasicTestStruct^>^ receivedData, List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo, System::Int32 maxSamples) {
	return OpenDDSharp::Test::BasicTestStructDataReader::Take(receivedData, receivedInfo, maxSamples, OpenDDSharp::DDS::SampleStateMask::AnySampleState, OpenDDSharp::DDS::ViewStateMask::AnyViewState, OpenDDSharp::DDS::InstanceStateMask::AnyInstanceState);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::Test::BasicTestStructDataReader::Take(List<BasicTestStruct^>^ receivedData, List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo, System::Int32 maxSamples, OpenDDSharp::DDS::ReadCondition^ condition) {
	if (condition == nullptr) {
		return OpenDDSharp::DDS::ReturnCode::BadParameter;
	}

	return OpenDDSharp::Test::BasicTestStructDataReader::Take(receivedData, receivedInfo, maxSamples, condition->SampleStateMask, condition->ViewStateMask, condition->InstanceStateMask);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::Test::BasicTestStructDataReader::Take(List<BasicTestStruct^>^ receivedData, List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo, System::Int32 maxSamples, OpenDDSharp::DDS::SampleStateMask sampleStates, OpenDDSharp::DDS::ViewStateMask viewStates, OpenDDSharp::DDS::InstanceStateMask instanceStates) {
    if (receivedData == nullptr || receivedInfo == nullptr) {
		return OpenDDSharp::DDS::ReturnCode::BadParameter;
	}

    receivedData->Clear();
	receivedInfo->Clear();

	::Test::BasicTestStructSeq received_data;
	::DDS::SampleInfoSeq info_seq;
	::DDS::ReturnCode_t ret = impl_entity->take(received_data, info_seq, maxSamples, sampleStates, viewStates, instanceStates);

	if (ret == ::DDS::RETCODE_OK) {
		for (unsigned int i = 0; i < received_data.length(); i++) {
			BasicTestStruct^ data = gcnew BasicTestStruct();
			::OpenDDSharp::DDS::SampleInfo^ sampleInfo = gcnew ::OpenDDSharp::DDS::SampleInfo();

			data->FromNative(received_data[i]);
			sampleInfo->FromNative(info_seq[i]);

			receivedData->Add(data);
			receivedInfo->Add(sampleInfo);
		}
	}

    impl_entity->return_loan(received_data, info_seq);

	return (OpenDDSharp::DDS::ReturnCode)ret;
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::Test::BasicTestStructDataReader::ReadInstance(List<BasicTestStruct^>^ receivedData, List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo, OpenDDSharp::DDS::InstanceHandle handle) {
	return  OpenDDSharp::Test::BasicTestStructDataReader::ReadInstance(receivedData, receivedInfo, handle, ::DDS::LENGTH_UNLIMITED, OpenDDSharp::DDS::SampleStateKind::NotReadSampleState, OpenDDSharp::DDS::ViewStateMask::AnyViewState, OpenDDSharp::DDS::InstanceStateMask::AnyInstanceState);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::Test::BasicTestStructDataReader::ReadInstance(List<BasicTestStruct^>^ receivedData, List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo, OpenDDSharp::DDS::InstanceHandle handle, System::Int32 maxSamples) {
	return  OpenDDSharp::Test::BasicTestStructDataReader::ReadInstance(receivedData, receivedInfo, handle, maxSamples, OpenDDSharp::DDS::SampleStateKind::NotReadSampleState, OpenDDSharp::DDS::ViewStateMask::AnyViewState, OpenDDSharp::DDS::InstanceStateMask::AnyInstanceState);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::Test::BasicTestStructDataReader::ReadInstance(List<BasicTestStruct^>^ receivedData, List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo, OpenDDSharp::DDS::InstanceHandle handle, System::Int32 maxSamples, OpenDDSharp::DDS::ReadCondition^ condition) {
	if (condition == nullptr) {
		return OpenDDSharp::DDS::ReturnCode::BadParameter;
	}

	return OpenDDSharp::Test::BasicTestStructDataReader::ReadInstance(receivedData, receivedInfo, handle, maxSamples, condition->SampleStateMask, condition->ViewStateMask, condition->InstanceStateMask);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::Test::BasicTestStructDataReader::ReadInstance(List<BasicTestStruct^>^ receivedData, List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo, OpenDDSharp::DDS::InstanceHandle handle, System::Int32 maxSamples, OpenDDSharp::DDS::SampleStateMask sampleStates, OpenDDSharp::DDS::ViewStateMask viewStates, OpenDDSharp::DDS::InstanceStateMask instanceStates) {
    if (receivedData == nullptr || receivedInfo == nullptr) {
		return OpenDDSharp::DDS::ReturnCode::BadParameter;
	}

    receivedData->Clear();
	receivedInfo->Clear();

	::Test::BasicTestStructSeq received_data;
	::DDS::SampleInfoSeq info_seq;
	::DDS::ReturnCode_t ret = impl_entity->read_instance(received_data, info_seq, maxSamples, handle, sampleStates, viewStates, instanceStates);

	if (ret == ::DDS::RETCODE_OK) {
		for (unsigned int i = 0; i < received_data.length(); i++) {
			BasicTestStruct^ data = gcnew BasicTestStruct();
			::OpenDDSharp::DDS::SampleInfo^ sampleInfo = gcnew ::OpenDDSharp::DDS::SampleInfo();

			data->FromNative(received_data[i]);
			sampleInfo->FromNative(info_seq[i]);

			receivedData->Add(data);
			receivedInfo->Add(sampleInfo);
		}
	}

    impl_entity->return_loan(received_data, info_seq);

	return (OpenDDSharp::DDS::ReturnCode)ret;
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::Test::BasicTestStructDataReader::TakeInstance(List<BasicTestStruct^>^ receivedData, List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo, OpenDDSharp::DDS::InstanceHandle handle) {
	return  OpenDDSharp::Test::BasicTestStructDataReader::TakeInstance(receivedData, receivedInfo, handle, ::DDS::LENGTH_UNLIMITED, OpenDDSharp::DDS::SampleStateMask::AnySampleState, OpenDDSharp::DDS::ViewStateMask::AnyViewState, OpenDDSharp::DDS::InstanceStateMask::AnyInstanceState);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::Test::BasicTestStructDataReader::TakeInstance(List<BasicTestStruct^>^ receivedData, List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo, OpenDDSharp::DDS::InstanceHandle handle, System::Int32 maxSamples) {
	return  OpenDDSharp::Test::BasicTestStructDataReader::TakeInstance(receivedData, receivedInfo, handle, maxSamples, OpenDDSharp::DDS::SampleStateMask::AnySampleState, OpenDDSharp::DDS::ViewStateMask::AnyViewState, OpenDDSharp::DDS::InstanceStateMask::AnyInstanceState);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::Test::BasicTestStructDataReader::TakeInstance(List<BasicTestStruct^>^ receivedData, List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo, OpenDDSharp::DDS::InstanceHandle handle, System::Int32 maxSamples, OpenDDSharp::DDS::ReadCondition^ condition) {
	if (condition == nullptr) {
		return OpenDDSharp::DDS::ReturnCode::BadParameter;
	}

	return OpenDDSharp::Test::BasicTestStructDataReader::TakeInstance(receivedData, receivedInfo, handle, maxSamples, condition->SampleStateMask, condition->ViewStateMask, condition->InstanceStateMask);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::Test::BasicTestStructDataReader::TakeInstance(List<BasicTestStruct^>^ receivedData, List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo, OpenDDSharp::DDS::InstanceHandle handle, System::Int32 maxSamples, OpenDDSharp::DDS::SampleStateMask sampleStates, OpenDDSharp::DDS::ViewStateMask viewStates, OpenDDSharp::DDS::InstanceStateMask instanceStates) {
    if (receivedData == nullptr || receivedInfo == nullptr) {
		return OpenDDSharp::DDS::ReturnCode::BadParameter;
	}

    receivedData->Clear();
	receivedInfo->Clear();

	::Test::BasicTestStructSeq received_data;
	::DDS::SampleInfoSeq info_seq;
	::DDS::ReturnCode_t ret = impl_entity->take_instance(received_data, info_seq, maxSamples, handle, sampleStates, viewStates, instanceStates);

	if (ret == ::DDS::RETCODE_OK) {
		for (unsigned int i = 0; i < received_data.length(); i++) {
			BasicTestStruct^ data = gcnew BasicTestStruct();
			::OpenDDSharp::DDS::SampleInfo^ sampleInfo = gcnew ::OpenDDSharp::DDS::SampleInfo();

			data->FromNative(received_data[i]);
			sampleInfo->FromNative(info_seq[i]);

			receivedData->Add(data);
			receivedInfo->Add(sampleInfo);
		}
	}

    impl_entity->return_loan(received_data, info_seq);

	return (OpenDDSharp::DDS::ReturnCode)ret;
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::Test::BasicTestStructDataReader::ReadNextInstance(List<BasicTestStruct^>^ receivedData, List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo, OpenDDSharp::DDS::InstanceHandle handle) {
	return  OpenDDSharp::Test::BasicTestStructDataReader::ReadNextInstance(receivedData, receivedInfo, handle, ::DDS::LENGTH_UNLIMITED, OpenDDSharp::DDS::SampleStateKind::NotReadSampleState, OpenDDSharp::DDS::ViewStateMask::AnyViewState, OpenDDSharp::DDS::InstanceStateMask::AnyInstanceState);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::Test::BasicTestStructDataReader::ReadNextInstance(List<BasicTestStruct^>^ receivedData, List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo, OpenDDSharp::DDS::InstanceHandle handle, System::Int32 maxSamples) {
	return  OpenDDSharp::Test::BasicTestStructDataReader::ReadNextInstance(receivedData, receivedInfo, handle, maxSamples, OpenDDSharp::DDS::SampleStateKind::NotReadSampleState, OpenDDSharp::DDS::ViewStateMask::AnyViewState, OpenDDSharp::DDS::InstanceStateMask::AnyInstanceState);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::Test::BasicTestStructDataReader::ReadNextInstance(List<BasicTestStruct^>^ receivedData, List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo, OpenDDSharp::DDS::InstanceHandle handle, System::Int32 maxSamples, OpenDDSharp::DDS::ReadCondition^ condition) {
	if (condition == nullptr) {
		return OpenDDSharp::DDS::ReturnCode::BadParameter;
	}

	return OpenDDSharp::Test::BasicTestStructDataReader::ReadNextInstance(receivedData, receivedInfo, handle, maxSamples, condition->SampleStateMask, condition->ViewStateMask, condition->InstanceStateMask);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::Test::BasicTestStructDataReader::ReadNextInstance(List<BasicTestStruct^>^ receivedData, List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo, OpenDDSharp::DDS::InstanceHandle handle, System::Int32 maxSamples, OpenDDSharp::DDS::SampleStateMask sampleStates, OpenDDSharp::DDS::ViewStateMask viewStates, OpenDDSharp::DDS::InstanceStateMask instanceStates) {
    if (receivedData == nullptr || receivedInfo == nullptr) {
		return OpenDDSharp::DDS::ReturnCode::BadParameter;
	}

    receivedData->Clear();
	receivedInfo->Clear();

	::Test::BasicTestStructSeq received_data;
	::DDS::SampleInfoSeq info_seq;
	::DDS::ReturnCode_t ret = impl_entity->read_next_instance(received_data, info_seq, maxSamples, handle, sampleStates, viewStates, instanceStates);

	if (ret == ::DDS::RETCODE_OK) {
		for (unsigned int i = 0; i < received_data.length(); i++) {
			BasicTestStruct^ data = gcnew BasicTestStruct();
			::OpenDDSharp::DDS::SampleInfo^ sampleInfo = gcnew ::OpenDDSharp::DDS::SampleInfo();

			data->FromNative(received_data[i]);
			sampleInfo->FromNative(info_seq[i]);

			receivedData->Add(data);
			receivedInfo->Add(sampleInfo);
		}
	}

    impl_entity->return_loan(received_data, info_seq);

	return (OpenDDSharp::DDS::ReturnCode)ret;
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::Test::BasicTestStructDataReader::TakeNextInstance(List<BasicTestStruct^>^ receivedData, List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo, OpenDDSharp::DDS::InstanceHandle handle) {
	return  OpenDDSharp::Test::BasicTestStructDataReader::TakeNextInstance(receivedData, receivedInfo, handle, ::DDS::LENGTH_UNLIMITED, OpenDDSharp::DDS::SampleStateMask::AnySampleState, OpenDDSharp::DDS::ViewStateMask::AnyViewState, OpenDDSharp::DDS::InstanceStateMask::AnyInstanceState);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::Test::BasicTestStructDataReader::TakeNextInstance(List<BasicTestStruct^>^ receivedData, List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo, OpenDDSharp::DDS::InstanceHandle handle, System::Int32 maxSamples) {
	return  OpenDDSharp::Test::BasicTestStructDataReader::TakeNextInstance(receivedData, receivedInfo, handle, maxSamples, OpenDDSharp::DDS::SampleStateMask::AnySampleState, OpenDDSharp::DDS::ViewStateMask::AnyViewState, OpenDDSharp::DDS::InstanceStateMask::AnyInstanceState);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::Test::BasicTestStructDataReader::TakeNextInstance(List<BasicTestStruct^>^ receivedData, List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo, OpenDDSharp::DDS::InstanceHandle handle, System::Int32 maxSamples, OpenDDSharp::DDS::ReadCondition^ condition) {
	if (condition == nullptr) {
		return OpenDDSharp::DDS::ReturnCode::BadParameter;
	}

	return OpenDDSharp::Test::BasicTestStructDataReader::TakeNextInstance(receivedData, receivedInfo, handle, maxSamples, condition->SampleStateMask, condition->ViewStateMask, condition->InstanceStateMask);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::Test::BasicTestStructDataReader::TakeNextInstance(List<BasicTestStruct^>^ receivedData, List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo, OpenDDSharp::DDS::InstanceHandle handle, System::Int32 maxSamples, OpenDDSharp::DDS::SampleStateMask sampleStates, OpenDDSharp::DDS::ViewStateMask viewStates, OpenDDSharp::DDS::InstanceStateMask instanceStates) {
    if (receivedData == nullptr || receivedInfo == nullptr) {
		return OpenDDSharp::DDS::ReturnCode::BadParameter;
	}

    receivedData->Clear();
	receivedInfo->Clear();

	::Test::BasicTestStructSeq received_data;
	::DDS::SampleInfoSeq info_seq;
	::DDS::ReturnCode_t ret = impl_entity->take_next_instance(received_data, info_seq, maxSamples, handle, sampleStates, viewStates, instanceStates);

	if (ret == ::DDS::RETCODE_OK) {
		for (unsigned int i = 0; i < received_data.length(); i++) {
			BasicTestStruct^ data = gcnew BasicTestStruct();
			::OpenDDSharp::DDS::SampleInfo^ sampleInfo = gcnew ::OpenDDSharp::DDS::SampleInfo();

			data->FromNative(received_data[i]);
			sampleInfo->FromNative(info_seq[i]);

			receivedData->Add(data);
			receivedInfo->Add(sampleInfo);
		}
	}

    impl_entity->return_loan(received_data, info_seq);

	return (OpenDDSharp::DDS::ReturnCode)ret;
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::Test::BasicTestStructDataReader::ReadNextSample(BasicTestStruct^ data, ::OpenDDSharp::DDS::SampleInfo^ sampleInfo) {
    ::Test::BasicTestStruct* aux = new ::Test::BasicTestStruct();
    ::DDS::SampleInfo sample_info;
	::DDS::ReturnCode_t ret = impl_entity->read_next_sample(*aux, sample_info);

    if (ret == ::DDS::RETCODE_OK) {
	    data->FromNative(*aux);
        sampleInfo->FromNative(sample_info);
    }

	return (OpenDDSharp::DDS::ReturnCode)ret;
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::Test::BasicTestStructDataReader::TakeNextSample(BasicTestStruct^ data, ::OpenDDSharp::DDS::SampleInfo^ sampleInfo) {
    ::Test::BasicTestStruct* aux = new ::Test::BasicTestStruct();
    ::DDS::SampleInfo sample_info;
	::DDS::ReturnCode_t ret = impl_entity->take_next_sample(*aux, sample_info);

    if (ret == ::DDS::RETCODE_OK) {
	    data->FromNative(*aux);
        sampleInfo->FromNative(sample_info);
    }

	return (OpenDDSharp::DDS::ReturnCode)ret;
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::Test::BasicTestStructDataReader::GetKeyValue(BasicTestStruct^ data, OpenDDSharp::DDS::InstanceHandle handle) {
	return (OpenDDSharp::DDS::ReturnCode)impl_entity->get_key_value(data->ToNative(), handle);
};

OpenDDSharp::DDS::InstanceHandle OpenDDSharp::Test::BasicTestStructDataReader::LookupInstance(BasicTestStruct^ instance) {
	return impl_entity->lookup_instance(instance->ToNative());
};

///////////////////////////////////////////////////////////////////////
OpenDDSharp::Test::TestStruct::TestStruct() {
    m_Id = 0;
    m_RawData = "";
    m_TimeTicks = 0;
    m_CharType = '\0';
    m_WcharType = '\0';
    m_OctetType = 0;
    m_ShortType = 0;
    m_UnsignedShortType = 0;
    m_UnsignedLongType = 0;
    m_UnsignedLongLongType = 0;
    m_FloatType = 0;
    m_DoubleType = 0;
    m_LongDoubleType = 0;
    m_BooleanType = false;
    m_WstringType = "";
    m_LongSequence = gcnew List<System::Int32>(20);
    m_StringSequence = gcnew List<System::String^>();
    m_StructSequence = gcnew List<OpenDDSharp::Test::BasicTestStruct^>(20);
    m_LongDoubleSequence = gcnew List<long double>();
    m_LongArray = gcnew array<System::Int32, 2>(3, 4);
    m_StringArray = gcnew array<System::String^, 2>(2, 2);
    m_StructArray = gcnew array<OpenDDSharp::Test::BasicTestStruct^, 2>(2, 2);
    m_LongDoubleArray = gcnew array<long double, 2>(2, 2);
    m_StructTest = gcnew OpenDDSharp::Test::BasicTestStruct();
}

System::Int32 OpenDDSharp::Test::TestStruct::Id::get() {
    return m_Id;
}

void OpenDDSharp::Test::TestStruct::Id::set(System::Int32 value) {
    m_Id = value;
}

System::String^ OpenDDSharp::Test::TestStruct::RawData::get() {
    return m_RawData;
}

void OpenDDSharp::Test::TestStruct::RawData::set(System::String^ value) {
    m_RawData = value;
}

System::Int64 OpenDDSharp::Test::TestStruct::TimeTicks::get() {
    return m_TimeTicks;
}

void OpenDDSharp::Test::TestStruct::TimeTicks::set(System::Int64 value) {
    m_TimeTicks = value;
}

System::Char OpenDDSharp::Test::TestStruct::CharType::get() {
    return m_CharType;
}

void OpenDDSharp::Test::TestStruct::CharType::set(System::Char value) {
    m_CharType = value;
}

System::Char OpenDDSharp::Test::TestStruct::WcharType::get() {
    return m_WcharType;
}

void OpenDDSharp::Test::TestStruct::WcharType::set(System::Char value) {
    m_WcharType = value;
}

System::Byte OpenDDSharp::Test::TestStruct::OctetType::get() {
    return m_OctetType;
}

void OpenDDSharp::Test::TestStruct::OctetType::set(System::Byte value) {
    m_OctetType = value;
}

System::Int16 OpenDDSharp::Test::TestStruct::ShortType::get() {
    return m_ShortType;
}

void OpenDDSharp::Test::TestStruct::ShortType::set(System::Int16 value) {
    m_ShortType = value;
}

System::UInt16 OpenDDSharp::Test::TestStruct::UnsignedShortType::get() {
    return m_UnsignedShortType;
}

void OpenDDSharp::Test::TestStruct::UnsignedShortType::set(System::UInt16 value) {
    m_UnsignedShortType = value;
}

System::UInt32 OpenDDSharp::Test::TestStruct::UnsignedLongType::get() {
    return m_UnsignedLongType;
}

void OpenDDSharp::Test::TestStruct::UnsignedLongType::set(System::UInt32 value) {
    m_UnsignedLongType = value;
}

System::UInt64 OpenDDSharp::Test::TestStruct::UnsignedLongLongType::get() {
    return m_UnsignedLongLongType;
}

void OpenDDSharp::Test::TestStruct::UnsignedLongLongType::set(System::UInt64 value) {
    m_UnsignedLongLongType = value;
}

System::Single OpenDDSharp::Test::TestStruct::FloatType::get() {
    return m_FloatType;
}

void OpenDDSharp::Test::TestStruct::FloatType::set(System::Single value) {
    m_FloatType = value;
}

System::Double OpenDDSharp::Test::TestStruct::DoubleType::get() {
    return m_DoubleType;
}

void OpenDDSharp::Test::TestStruct::DoubleType::set(System::Double value) {
    m_DoubleType = value;
}

long double OpenDDSharp::Test::TestStruct::LongDoubleType::get() {
    return m_LongDoubleType;
}

void OpenDDSharp::Test::TestStruct::LongDoubleType::set(long double value) {
    m_LongDoubleType = value;
}

System::Boolean OpenDDSharp::Test::TestStruct::BooleanType::get() {
    return m_BooleanType;
}

void OpenDDSharp::Test::TestStruct::BooleanType::set(System::Boolean value) {
    m_BooleanType = value;
}

System::String^ OpenDDSharp::Test::TestStruct::WstringType::get() {
    return m_WstringType;
}

void OpenDDSharp::Test::TestStruct::WstringType::set(System::String^ value) {
    m_WstringType = value;
}

OpenDDSharp::Test::LongList^ OpenDDSharp::Test::TestStruct::LongSequence::get() {
    return m_LongSequence;
}

void OpenDDSharp::Test::TestStruct::LongSequence::set(OpenDDSharp::Test::LongList^ value) {
    m_LongSequence = value;
}

OpenDDSharp::Test::StringList^ OpenDDSharp::Test::TestStruct::StringSequence::get() {
    return m_StringSequence;
}

void OpenDDSharp::Test::TestStruct::StringSequence::set(OpenDDSharp::Test::StringList^ value) {
    m_StringSequence = value;
}

OpenDDSharp::Test::StructList^ OpenDDSharp::Test::TestStruct::StructSequence::get() {
    return m_StructSequence;
}

void OpenDDSharp::Test::TestStruct::StructSequence::set(OpenDDSharp::Test::StructList^ value) {
    m_StructSequence = value;
}

OpenDDSharp::Test::LongDoubleList^ OpenDDSharp::Test::TestStruct::LongDoubleSequence::get() {
    return m_LongDoubleSequence;
}

void OpenDDSharp::Test::TestStruct::LongDoubleSequence::set(OpenDDSharp::Test::LongDoubleList^ value) {
    m_LongDoubleSequence = value;
}

OpenDDSharp::Test::ArrayLong^ OpenDDSharp::Test::TestStruct::LongArray::get() {
    return m_LongArray;
}

void OpenDDSharp::Test::TestStruct::LongArray::set(OpenDDSharp::Test::ArrayLong^ value) {
    m_LongArray = value;
}

OpenDDSharp::Test::ArrayString^ OpenDDSharp::Test::TestStruct::StringArray::get() {
    return m_StringArray;
}

void OpenDDSharp::Test::TestStruct::StringArray::set(OpenDDSharp::Test::ArrayString^ value) {
    m_StringArray = value;
}

OpenDDSharp::Test::ArrayStruct^ OpenDDSharp::Test::TestStruct::StructArray::get() {
    return m_StructArray;
}

void OpenDDSharp::Test::TestStruct::StructArray::set(OpenDDSharp::Test::ArrayStruct^ value) {
    m_StructArray = value;
}

OpenDDSharp::Test::ArrayLongDouble^ OpenDDSharp::Test::TestStruct::LongDoubleArray::get() {
    return m_LongDoubleArray;
}

void OpenDDSharp::Test::TestStruct::LongDoubleArray::set(OpenDDSharp::Test::ArrayLongDouble^ value) {
    m_LongDoubleArray = value;
}

OpenDDSharp::Test::BasicTestStruct^ OpenDDSharp::Test::TestStruct::StructTest::get() {
    return m_StructTest;
}

void OpenDDSharp::Test::TestStruct::StructTest::set(OpenDDSharp::Test::BasicTestStruct^ value) {
    m_StructTest = value;
}

OpenDDSharp::Test::PrimitiveEnum OpenDDSharp::Test::TestStruct::TestEnum::get() {
    return m_TestEnum;
}

void OpenDDSharp::Test::TestStruct::TestEnum::set(OpenDDSharp::Test::PrimitiveEnum value) {
    m_TestEnum = value;
}

::Test::TestStruct OpenDDSharp::Test::TestStruct::ToNative() {
    ::Test::TestStruct ret;
    msclr::interop::marshal_context context;

    ret.Id = m_Id;
    if (m_RawData != nullptr) {
        ret.RawData = context.marshal_as<const char*>(m_RawData);
    }
    else {
        ret.RawData = "";
    }
    ret.TimeTicks = m_TimeTicks;
    ret.CharType = m_CharType;
    ret.WcharType = m_WcharType;
    ret.OctetType = m_OctetType;
    ret.ShortType = m_ShortType;
    ret.UnsignedShortType = m_UnsignedShortType;
    ret.UnsignedLongType = m_UnsignedLongType;
    ret.UnsignedLongLongType = m_UnsignedLongLongType;
    ret.FloatType = m_FloatType;
    ret.DoubleType = m_DoubleType;
    const long double const_LongDoubleType = m_LongDoubleType;
    CORBA::LongDouble* native_LongDoubleType = new CORBA::LongDouble();
    native_LongDoubleType->assign(const_LongDoubleType);
    ret.LongDoubleType = *native_LongDoubleType;
    ret.BooleanType = m_BooleanType;
    if (m_WstringType != nullptr) {
    ret.WstringType = context.marshal_as<const wchar_t*>(m_WstringType);
    }
    else {
        ret.WstringType = (const wchar_t*)("");
    }
    if (m_LongSequence != nullptr) {
        ::Test::LongList* seq_LongSequence = new ::Test::LongList();
        int seq_LongSequence_length = System::Math::Min((int)seq_LongSequence->maximum(), m_LongSequence->Count);
        seq_LongSequence->length(seq_LongSequence_length);
        for (int i = 0; i < seq_LongSequence_length; i++) {
            (*seq_LongSequence)[i] = m_LongSequence[i];
        }
        ret.LongSequence = *seq_LongSequence;
    }
    else {
        ret.LongSequence.length(0);
    }
    if (m_StringSequence != nullptr) {
        ::Test::StringList* seq_StringSequence = new ::Test::StringList();
        int seq_StringSequence_length = m_StringSequence->Count;
        seq_StringSequence->length(seq_StringSequence_length);
        for (int i = 0; i < seq_StringSequence_length; i++) {
            if (m_StringSequence[i] != nullptr) {
                (*seq_StringSequence)[i] = context.marshal_as<const char*>(m_StringSequence[i]);
            }
            else {
                (*seq_StringSequence)[i] = "";
            }
        }
        ret.StringSequence = *seq_StringSequence;
    }
    else {
        ret.StringSequence.length(0);
    }
    if (m_StructSequence != nullptr) {
        ::Test::StructList* seq_StructSequence = new ::Test::StructList();
        int seq_StructSequence_length = System::Math::Min((int)seq_StructSequence->maximum(), m_StructSequence->Count);
        seq_StructSequence->length(seq_StructSequence_length);
        for (int i = 0; i < seq_StructSequence_length; i++) {
            if (m_StructSequence[i] != nullptr) {
                (*seq_StructSequence)[i] = m_StructSequence[i]->ToNative();
            }
            else {
                ::Test::BasicTestStruct* aux = new ::Test::BasicTestStruct();
                (*seq_StructSequence)[i] = *aux;
            }
        }
        ret.StructSequence = *seq_StructSequence;
    }
    else {
        ret.StructSequence.length(0);
    }
    if (m_LongDoubleSequence != nullptr) {
        ::Test::LongDoubleList* seq_LongDoubleSequence = new ::Test::LongDoubleList();
        int seq_LongDoubleSequence_length = m_LongDoubleSequence->Count;
        seq_LongDoubleSequence->length(seq_LongDoubleSequence_length);
        for (int i = 0; i < seq_LongDoubleSequence_length; i++) {
            const long double const_aux = m_LongDoubleSequence[i];
            CORBA::LongDouble* aux = new CORBA::LongDouble();
            aux->assign(const_aux);
            (*seq_LongDoubleSequence)[i] = *aux;
        }
        ret.LongDoubleSequence = *seq_LongDoubleSequence;
    }
    else {
        ret.LongDoubleSequence.length(0);
    }
    if (m_LongArray != nullptr) {
        unsigned int dim0_LongArray = System::Math::Min(m_LongArray->GetLength(0), 3);
        unsigned int dim1_LongArray = System::Math::Min(m_LongArray->GetLength(1), 4);
        for (unsigned int i_dim0 = 0; i_dim0 < dim0_LongArray; i_dim0++) {
        for (unsigned int i_dim1 = 0; i_dim1 < dim1_LongArray; i_dim1++) {
            ret.LongArray[i_dim0][i_dim1] = m_LongArray[i_dim0, i_dim1];
        }
        }
    }
    if (m_StringArray != nullptr) {
        unsigned int dim0_StringArray = System::Math::Min(m_StringArray->GetLength(0), 2);
        unsigned int dim1_StringArray = System::Math::Min(m_StringArray->GetLength(1), 2);
        for (unsigned int i_dim0 = 0; i_dim0 < dim0_StringArray; i_dim0++) {
        for (unsigned int i_dim1 = 0; i_dim1 < dim1_StringArray; i_dim1++) {
            if (m_StringArray[i_dim0, i_dim1] != nullptr) {
                ret.StringArray[i_dim0][i_dim1] = context.marshal_as<const char*>(m_StringArray[i_dim0, i_dim1]);
            }
            else {
                ret.StringArray[i_dim0][i_dim1] = "";
            }
        }
        }
    }
    if (m_StructArray != nullptr) {
        unsigned int dim0_StructArray = System::Math::Min(m_StructArray->GetLength(0), 2);
        unsigned int dim1_StructArray = System::Math::Min(m_StructArray->GetLength(1), 2);
        for (unsigned int i_dim0 = 0; i_dim0 < dim0_StructArray; i_dim0++) {
        for (unsigned int i_dim1 = 0; i_dim1 < dim1_StructArray; i_dim1++) {
            if (m_StructArray[i_dim0, i_dim1] != nullptr) {
                ret.StructArray[i_dim0][i_dim1] = m_StructArray[i_dim0, i_dim1]->ToNative();
            }
            else {
                ::Test::BasicTestStruct* aux = new ::Test::BasicTestStruct();
                ret.StructArray[i_dim0][i_dim1] = *aux;
            }
        }
        }
    }
    if (m_LongDoubleArray != nullptr) {
        unsigned int dim0_LongDoubleArray = System::Math::Min(m_LongDoubleArray->GetLength(0), 2);
        unsigned int dim1_LongDoubleArray = System::Math::Min(m_LongDoubleArray->GetLength(1), 2);
        for (unsigned int i_dim0 = 0; i_dim0 < dim0_LongDoubleArray; i_dim0++) {
        for (unsigned int i_dim1 = 0; i_dim1 < dim1_LongDoubleArray; i_dim1++) {
            const long double const_aux = m_LongDoubleArray[i_dim0, i_dim1];
            CORBA::LongDouble* aux = new CORBA::LongDouble();
            aux->assign(const_aux);
            ret.LongDoubleArray[i_dim0][i_dim1] = *aux;
        }
        }
    }
    if (m_StructTest != nullptr) {
        ret.StructTest = m_StructTest->ToNative();
    }
    ret.TestEnum = (::Test::PrimitiveEnum)m_TestEnum;

    return ret;
}

void  OpenDDSharp::Test::TestStruct::FromNative(::Test::TestStruct native) {
    m_Id = native.Id;
    m_RawData = gcnew System::String(native.RawData);
    m_TimeTicks = native.TimeTicks;
    m_CharType = native.CharType;
    m_WcharType = native.WcharType;
    m_OctetType = native.OctetType;
    m_ShortType = native.ShortType;
    m_UnsignedShortType = native.UnsignedShortType;
    m_UnsignedLongType = native.UnsignedLongType;
    m_UnsignedLongLongType = native.UnsignedLongLongType;
    m_FloatType = native.FloatType;
    m_DoubleType = native.DoubleType;
    m_LongDoubleType = native.LongDoubleType;
    m_BooleanType = native.BooleanType;
    m_WstringType = gcnew System::String(native.WstringType);
    m_LongSequence = gcnew List<System::Int32>(20);
    ::Test::LongList seq_LongSequence = native.LongSequence;
    for (unsigned int i = 0; i < seq_LongSequence.length(); i++) {
        m_LongSequence->Add(seq_LongSequence[i]);
    }
    m_StringSequence = gcnew List<System::String^>();
    ::Test::StringList seq_StringSequence = native.StringSequence;
    for (unsigned int i = 0; i < seq_StringSequence.length(); i++) {
        m_StringSequence->Add(gcnew System::String(seq_StringSequence[i]));
    }
    m_StructSequence = gcnew List<OpenDDSharp::Test::BasicTestStruct^>(20);
    ::Test::StructList seq_StructSequence = native.StructSequence;
    for (unsigned int i = 0; i < seq_StructSequence.length(); i++) {
        OpenDDSharp::Test::BasicTestStruct^ aux = gcnew OpenDDSharp::Test::BasicTestStruct();
        aux->FromNative(seq_StructSequence[i]);
        m_StructSequence->Add(aux);
    }
    m_LongDoubleSequence = gcnew List<long double>();
    ::Test::LongDoubleList seq_LongDoubleSequence = native.LongDoubleSequence;
    for (unsigned int i = 0; i < seq_LongDoubleSequence.length(); i++) {
        m_LongDoubleSequence->Add(seq_LongDoubleSequence[i]);
    }
    m_LongArray = gcnew array<System::Int32, 2>(3, 4);
    for (unsigned int i_dim0 = 0; i_dim0 < 3; i_dim0++) {
    for (unsigned int i_dim1 = 0; i_dim1 < 4; i_dim1++) {
        m_LongArray[i_dim0, i_dim1] = native.LongArray[i_dim0][i_dim1];
    }
    }
    m_StringArray = gcnew array<System::String^, 2>(2, 2);
    for (unsigned int i_dim0 = 0; i_dim0 < 2; i_dim0++) {
    for (unsigned int i_dim1 = 0; i_dim1 < 2; i_dim1++) {
        if (native.StringArray[i_dim0][i_dim1] != NULL) {
            m_StringArray[i_dim0, i_dim1] = gcnew System::String(native.StringArray[i_dim0][i_dim1]);
        }
        else {
            m_StringArray[i_dim0, i_dim1] = "";
        }
    }
    }
    m_StructArray = gcnew array<OpenDDSharp::Test::BasicTestStruct^, 2>(2, 2);
    for (unsigned int i_dim0 = 0; i_dim0 < 2; i_dim0++) {
    for (unsigned int i_dim1 = 0; i_dim1 < 2; i_dim1++) {
        m_StructArray[i_dim0, i_dim1] = gcnew OpenDDSharp::Test::BasicTestStruct();
        m_StructArray[i_dim0, i_dim1]->FromNative(native.StructArray[i_dim0][i_dim1]);
    }
    }
    m_LongDoubleArray = gcnew array<long double, 2>(2, 2);
    for (unsigned int i_dim0 = 0; i_dim0 < 2; i_dim0++) {
    for (unsigned int i_dim1 = 0; i_dim1 < 2; i_dim1++) {
        m_LongDoubleArray[i_dim0, i_dim1] = native.LongDoubleArray[i_dim0][i_dim1];
    }
    }
    m_StructTest->FromNative(native.StructTest);
    m_TestEnum = (::OpenDDSharp::Test::PrimitiveEnum)native.TestEnum;
}

///////////////////////////////////////////////////////////////////////

OpenDDSharp::Test::TestStructTypeSupport::TestStructTypeSupport() {
	impl_entity = new ::Test::TestStructTypeSupportImpl();
};

System::String^ OpenDDSharp::Test::TestStructTypeSupport::GetTypeName() {
	return context.marshal_as<System::String^>(impl_entity->get_type_name());
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::Test::TestStructTypeSupport::RegisterType(::OpenDDSharp::DDS::DomainParticipant^ participant, System::String^ typeName) {
    const char * type_name = context.marshal_as<const char*>(typeName);
    ::DDS::DomainParticipant_ptr dp = participant->impl_entity;
	return (OpenDDSharp::DDS::ReturnCode)impl_entity->register_type(dp, type_name);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::Test::TestStructTypeSupport::UnregisterType(::OpenDDSharp::DDS::DomainParticipant^ participant, System::String^ typeName) {
	return (OpenDDSharp::DDS::ReturnCode)impl_entity->unregister_type(participant->impl_entity, context.marshal_as<const char*>(typeName));
};

///////////////////////////////////////////////////////////////////////

OpenDDSharp::Test::TestStructDataWriter::TestStructDataWriter(::OpenDDSharp::DDS::DataWriter^ dataWriter) : OpenDDSharp::DDS::DataWriter(dataWriter->impl_entity) {
	impl_entity = ::Test::TestStructDataWriter::_narrow(dataWriter->impl_entity);
};

OpenDDSharp::DDS::InstanceHandle OpenDDSharp::Test::TestStructDataWriter::RegisterInstance(TestStruct^ instance) {
	return impl_entity->register_instance(instance->ToNative());
};

OpenDDSharp::DDS::InstanceHandle OpenDDSharp::Test::TestStructDataWriter::RegisterInstance(TestStruct^ instance, OpenDDSharp::DDS::Timestamp timestamp) {
    ::DDS::Time_t time;	
	time.sec = timestamp.Seconds;
	time.nanosec = timestamp.NanoSeconds;

	return impl_entity->register_instance_w_timestamp(instance->ToNative(), time);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::Test::TestStructDataWriter::UnregisterInstance(TestStruct^ data) {
	return (OpenDDSharp::DDS::ReturnCode)impl_entity->unregister_instance(data->ToNative(), ::DDS::HANDLE_NIL);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::Test::TestStructDataWriter::UnregisterInstance(TestStruct^ data, OpenDDSharp::DDS::InstanceHandle handle) {
	return (OpenDDSharp::DDS::ReturnCode)impl_entity->unregister_instance(data->ToNative(), handle);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::Test::TestStructDataWriter::UnregisterInstance(TestStruct^ data, OpenDDSharp::DDS::InstanceHandle handle, OpenDDSharp::DDS::Timestamp timestamp) {
	::DDS::Time_t time;
	time.sec = timestamp.Seconds;
	time.nanosec = timestamp.NanoSeconds;

	return (OpenDDSharp::DDS::ReturnCode)impl_entity->unregister_instance_w_timestamp(data->ToNative(), handle, time);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::Test::TestStructDataWriter::Write(TestStruct^ data) {
	return (OpenDDSharp::DDS::ReturnCode)impl_entity->write(data->ToNative(), ::DDS::HANDLE_NIL);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::Test::TestStructDataWriter::Write(TestStruct^ data, OpenDDSharp::DDS::InstanceHandle handle) {
	return (OpenDDSharp::DDS::ReturnCode)impl_entity->write(data->ToNative(), handle);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::Test::TestStructDataWriter::Write(TestStruct^ data, OpenDDSharp::DDS::InstanceHandle handle, OpenDDSharp::DDS::Timestamp timestamp) {
	::DDS::Time_t time;
	time.sec = timestamp.Seconds;
	time.nanosec = timestamp.NanoSeconds;

	return (OpenDDSharp::DDS::ReturnCode)impl_entity->write_w_timestamp(data->ToNative(), handle, time);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::Test::TestStructDataWriter::Dispose(TestStruct^ data) {
	return (OpenDDSharp::DDS::ReturnCode)impl_entity->dispose(data->ToNative(), ::DDS::HANDLE_NIL);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::Test::TestStructDataWriter::Dispose(TestStruct^ data, OpenDDSharp::DDS::InstanceHandle handle) {
	return (OpenDDSharp::DDS::ReturnCode)impl_entity->dispose(data->ToNative(), handle);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::Test::TestStructDataWriter::Dispose(TestStruct^ data, OpenDDSharp::DDS::InstanceHandle handle, OpenDDSharp::DDS::Timestamp timestamp) {
	::DDS::Time_t time;
	time.sec = timestamp.Seconds;
	time.nanosec = timestamp.NanoSeconds;

	return (OpenDDSharp::DDS::ReturnCode)impl_entity->dispose_w_timestamp(data->ToNative(), handle, time);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::Test::TestStructDataWriter::GetKeyValue(TestStruct^ data, OpenDDSharp::DDS::InstanceHandle handle) {
	return (OpenDDSharp::DDS::ReturnCode)impl_entity->get_key_value(data->ToNative(), handle);
};

System::Int32 OpenDDSharp::Test::TestStructDataWriter::LookupInstance(TestStruct^ instance) {
	return impl_entity->lookup_instance(instance->ToNative());
};

///////////////////////////////////////////////////////////////////////

OpenDDSharp::Test::TestStructDataReader::TestStructDataReader(::OpenDDSharp::DDS::DataReader^ dataReader) : OpenDDSharp::DDS::DataReader(dataReader->impl_entity) {
	impl_entity = ::Test::TestStructDataReader::_narrow(dataReader->impl_entity);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::Test::TestStructDataReader::Read(List<TestStruct^>^ receivedData, List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo) {
	return OpenDDSharp::Test::TestStructDataReader::Read(receivedData, receivedInfo, ::DDS::LENGTH_UNLIMITED, OpenDDSharp::DDS::SampleStateKind::NotReadSampleState, OpenDDSharp::DDS::ViewStateMask::AnyViewState, OpenDDSharp::DDS::InstanceStateMask::AnyInstanceState);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::Test::TestStructDataReader::Read(List<TestStruct^>^ receivedData, List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo, System::Int32 maxSamples) {
	return OpenDDSharp::Test::TestStructDataReader::Read(receivedData, receivedInfo, maxSamples, OpenDDSharp::DDS::SampleStateKind::NotReadSampleState, OpenDDSharp::DDS::ViewStateMask::AnyViewState, OpenDDSharp::DDS::InstanceStateMask::AnyInstanceState);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::Test::TestStructDataReader::Read(List<TestStruct^>^ receivedData, List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo, System::Int32 maxSamples, OpenDDSharp::DDS::ReadCondition^ condition) {
	if (condition == nullptr) {
		return OpenDDSharp::DDS::ReturnCode::BadParameter;
	}

	return OpenDDSharp::Test::TestStructDataReader::Read(receivedData, receivedInfo, maxSamples, condition->SampleStateMask, condition->ViewStateMask, condition->InstanceStateMask);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::Test::TestStructDataReader::Read(List<TestStruct^>^ receivedData, List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo, System::Int32 maxSamples, OpenDDSharp::DDS::SampleStateMask sampleStates, OpenDDSharp::DDS::ViewStateMask viewStates, OpenDDSharp::DDS::InstanceStateMask instanceStates) {
    if (receivedData == nullptr || receivedInfo == nullptr) {
		return OpenDDSharp::DDS::ReturnCode::BadParameter;
	}

    receivedData->Clear();
	receivedInfo->Clear();
    
	::Test::TestStructSeq received_data;
	::DDS::SampleInfoSeq info_seq;
	::DDS::ReturnCode_t ret = impl_entity->read(received_data, info_seq, maxSamples, sampleStates, viewStates, instanceStates);

	if (ret == ::DDS::RETCODE_OK) {
		for (unsigned int i = 0; i < received_data.length(); i++) {
			TestStruct^ data = gcnew TestStruct();
			::OpenDDSharp::DDS::SampleInfo^ sampleInfo = gcnew ::OpenDDSharp::DDS::SampleInfo();

			data->FromNative(received_data[i]);
			sampleInfo->FromNative(info_seq[i]);

			receivedData->Add(data);
			receivedInfo->Add(sampleInfo);
		}
	}

    impl_entity->return_loan(received_data, info_seq);

	return (OpenDDSharp::DDS::ReturnCode)ret;
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::Test::TestStructDataReader::Take(List<TestStruct^>^ receivedData, List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo) {
	return OpenDDSharp::Test::TestStructDataReader::Take(receivedData, receivedInfo, ::DDS::LENGTH_UNLIMITED, OpenDDSharp::DDS::SampleStateMask::AnySampleState, OpenDDSharp::DDS::ViewStateMask::AnyViewState, OpenDDSharp::DDS::InstanceStateMask::AnyInstanceState);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::Test::TestStructDataReader::Take(List<TestStruct^>^ receivedData, List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo, System::Int32 maxSamples) {
	return OpenDDSharp::Test::TestStructDataReader::Take(receivedData, receivedInfo, maxSamples, OpenDDSharp::DDS::SampleStateMask::AnySampleState, OpenDDSharp::DDS::ViewStateMask::AnyViewState, OpenDDSharp::DDS::InstanceStateMask::AnyInstanceState);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::Test::TestStructDataReader::Take(List<TestStruct^>^ receivedData, List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo, System::Int32 maxSamples, OpenDDSharp::DDS::ReadCondition^ condition) {
	if (condition == nullptr) {
		return OpenDDSharp::DDS::ReturnCode::BadParameter;
	}

	return OpenDDSharp::Test::TestStructDataReader::Take(receivedData, receivedInfo, maxSamples, condition->SampleStateMask, condition->ViewStateMask, condition->InstanceStateMask);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::Test::TestStructDataReader::Take(List<TestStruct^>^ receivedData, List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo, System::Int32 maxSamples, OpenDDSharp::DDS::SampleStateMask sampleStates, OpenDDSharp::DDS::ViewStateMask viewStates, OpenDDSharp::DDS::InstanceStateMask instanceStates) {
    if (receivedData == nullptr || receivedInfo == nullptr) {
		return OpenDDSharp::DDS::ReturnCode::BadParameter;
	}

    receivedData->Clear();
	receivedInfo->Clear();

	::Test::TestStructSeq received_data;
	::DDS::SampleInfoSeq info_seq;
	::DDS::ReturnCode_t ret = impl_entity->take(received_data, info_seq, maxSamples, sampleStates, viewStates, instanceStates);

	if (ret == ::DDS::RETCODE_OK) {
		for (unsigned int i = 0; i < received_data.length(); i++) {
			TestStruct^ data = gcnew TestStruct();
			::OpenDDSharp::DDS::SampleInfo^ sampleInfo = gcnew ::OpenDDSharp::DDS::SampleInfo();

			data->FromNative(received_data[i]);
			sampleInfo->FromNative(info_seq[i]);

			receivedData->Add(data);
			receivedInfo->Add(sampleInfo);
		}
	}

    impl_entity->return_loan(received_data, info_seq);

	return (OpenDDSharp::DDS::ReturnCode)ret;
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::Test::TestStructDataReader::ReadInstance(List<TestStruct^>^ receivedData, List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo, OpenDDSharp::DDS::InstanceHandle handle) {
	return  OpenDDSharp::Test::TestStructDataReader::ReadInstance(receivedData, receivedInfo, handle, ::DDS::LENGTH_UNLIMITED, OpenDDSharp::DDS::SampleStateKind::NotReadSampleState, OpenDDSharp::DDS::ViewStateMask::AnyViewState, OpenDDSharp::DDS::InstanceStateMask::AnyInstanceState);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::Test::TestStructDataReader::ReadInstance(List<TestStruct^>^ receivedData, List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo, OpenDDSharp::DDS::InstanceHandle handle, System::Int32 maxSamples) {
	return  OpenDDSharp::Test::TestStructDataReader::ReadInstance(receivedData, receivedInfo, handle, maxSamples, OpenDDSharp::DDS::SampleStateKind::NotReadSampleState, OpenDDSharp::DDS::ViewStateMask::AnyViewState, OpenDDSharp::DDS::InstanceStateMask::AnyInstanceState);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::Test::TestStructDataReader::ReadInstance(List<TestStruct^>^ receivedData, List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo, OpenDDSharp::DDS::InstanceHandle handle, System::Int32 maxSamples, OpenDDSharp::DDS::ReadCondition^ condition) {
	if (condition == nullptr) {
		return OpenDDSharp::DDS::ReturnCode::BadParameter;
	}

	return OpenDDSharp::Test::TestStructDataReader::ReadInstance(receivedData, receivedInfo, handle, maxSamples, condition->SampleStateMask, condition->ViewStateMask, condition->InstanceStateMask);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::Test::TestStructDataReader::ReadInstance(List<TestStruct^>^ receivedData, List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo, OpenDDSharp::DDS::InstanceHandle handle, System::Int32 maxSamples, OpenDDSharp::DDS::SampleStateMask sampleStates, OpenDDSharp::DDS::ViewStateMask viewStates, OpenDDSharp::DDS::InstanceStateMask instanceStates) {
    if (receivedData == nullptr || receivedInfo == nullptr) {
		return OpenDDSharp::DDS::ReturnCode::BadParameter;
	}

    receivedData->Clear();
	receivedInfo->Clear();

	::Test::TestStructSeq received_data;
	::DDS::SampleInfoSeq info_seq;
	::DDS::ReturnCode_t ret = impl_entity->read_instance(received_data, info_seq, maxSamples, handle, sampleStates, viewStates, instanceStates);

	if (ret == ::DDS::RETCODE_OK) {
		for (unsigned int i = 0; i < received_data.length(); i++) {
			TestStruct^ data = gcnew TestStruct();
			::OpenDDSharp::DDS::SampleInfo^ sampleInfo = gcnew ::OpenDDSharp::DDS::SampleInfo();

			data->FromNative(received_data[i]);
			sampleInfo->FromNative(info_seq[i]);

			receivedData->Add(data);
			receivedInfo->Add(sampleInfo);
		}
	}

    impl_entity->return_loan(received_data, info_seq);

	return (OpenDDSharp::DDS::ReturnCode)ret;
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::Test::TestStructDataReader::TakeInstance(List<TestStruct^>^ receivedData, List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo, OpenDDSharp::DDS::InstanceHandle handle) {
	return  OpenDDSharp::Test::TestStructDataReader::TakeInstance(receivedData, receivedInfo, handle, ::DDS::LENGTH_UNLIMITED, OpenDDSharp::DDS::SampleStateMask::AnySampleState, OpenDDSharp::DDS::ViewStateMask::AnyViewState, OpenDDSharp::DDS::InstanceStateMask::AnyInstanceState);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::Test::TestStructDataReader::TakeInstance(List<TestStruct^>^ receivedData, List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo, OpenDDSharp::DDS::InstanceHandle handle, System::Int32 maxSamples) {
	return  OpenDDSharp::Test::TestStructDataReader::TakeInstance(receivedData, receivedInfo, handle, maxSamples, OpenDDSharp::DDS::SampleStateMask::AnySampleState, OpenDDSharp::DDS::ViewStateMask::AnyViewState, OpenDDSharp::DDS::InstanceStateMask::AnyInstanceState);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::Test::TestStructDataReader::TakeInstance(List<TestStruct^>^ receivedData, List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo, OpenDDSharp::DDS::InstanceHandle handle, System::Int32 maxSamples, OpenDDSharp::DDS::ReadCondition^ condition) {
	if (condition == nullptr) {
		return OpenDDSharp::DDS::ReturnCode::BadParameter;
	}

	return OpenDDSharp::Test::TestStructDataReader::TakeInstance(receivedData, receivedInfo, handle, maxSamples, condition->SampleStateMask, condition->ViewStateMask, condition->InstanceStateMask);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::Test::TestStructDataReader::TakeInstance(List<TestStruct^>^ receivedData, List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo, OpenDDSharp::DDS::InstanceHandle handle, System::Int32 maxSamples, OpenDDSharp::DDS::SampleStateMask sampleStates, OpenDDSharp::DDS::ViewStateMask viewStates, OpenDDSharp::DDS::InstanceStateMask instanceStates) {
    if (receivedData == nullptr || receivedInfo == nullptr) {
		return OpenDDSharp::DDS::ReturnCode::BadParameter;
	}

    receivedData->Clear();
	receivedInfo->Clear();

	::Test::TestStructSeq received_data;
	::DDS::SampleInfoSeq info_seq;
	::DDS::ReturnCode_t ret = impl_entity->take_instance(received_data, info_seq, maxSamples, handle, sampleStates, viewStates, instanceStates);

	if (ret == ::DDS::RETCODE_OK) {
		for (unsigned int i = 0; i < received_data.length(); i++) {
			TestStruct^ data = gcnew TestStruct();
			::OpenDDSharp::DDS::SampleInfo^ sampleInfo = gcnew ::OpenDDSharp::DDS::SampleInfo();

			data->FromNative(received_data[i]);
			sampleInfo->FromNative(info_seq[i]);

			receivedData->Add(data);
			receivedInfo->Add(sampleInfo);
		}
	}

    impl_entity->return_loan(received_data, info_seq);

	return (OpenDDSharp::DDS::ReturnCode)ret;
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::Test::TestStructDataReader::ReadNextInstance(List<TestStruct^>^ receivedData, List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo, OpenDDSharp::DDS::InstanceHandle handle) {
	return  OpenDDSharp::Test::TestStructDataReader::ReadNextInstance(receivedData, receivedInfo, handle, ::DDS::LENGTH_UNLIMITED, OpenDDSharp::DDS::SampleStateKind::NotReadSampleState, OpenDDSharp::DDS::ViewStateMask::AnyViewState, OpenDDSharp::DDS::InstanceStateMask::AnyInstanceState);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::Test::TestStructDataReader::ReadNextInstance(List<TestStruct^>^ receivedData, List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo, OpenDDSharp::DDS::InstanceHandle handle, System::Int32 maxSamples) {
	return  OpenDDSharp::Test::TestStructDataReader::ReadNextInstance(receivedData, receivedInfo, handle, maxSamples, OpenDDSharp::DDS::SampleStateKind::NotReadSampleState, OpenDDSharp::DDS::ViewStateMask::AnyViewState, OpenDDSharp::DDS::InstanceStateMask::AnyInstanceState);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::Test::TestStructDataReader::ReadNextInstance(List<TestStruct^>^ receivedData, List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo, OpenDDSharp::DDS::InstanceHandle handle, System::Int32 maxSamples, OpenDDSharp::DDS::ReadCondition^ condition) {
	if (condition == nullptr) {
		return OpenDDSharp::DDS::ReturnCode::BadParameter;
	}

	return OpenDDSharp::Test::TestStructDataReader::ReadNextInstance(receivedData, receivedInfo, handle, maxSamples, condition->SampleStateMask, condition->ViewStateMask, condition->InstanceStateMask);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::Test::TestStructDataReader::ReadNextInstance(List<TestStruct^>^ receivedData, List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo, OpenDDSharp::DDS::InstanceHandle handle, System::Int32 maxSamples, OpenDDSharp::DDS::SampleStateMask sampleStates, OpenDDSharp::DDS::ViewStateMask viewStates, OpenDDSharp::DDS::InstanceStateMask instanceStates) {
    if (receivedData == nullptr || receivedInfo == nullptr) {
		return OpenDDSharp::DDS::ReturnCode::BadParameter;
	}

    receivedData->Clear();
	receivedInfo->Clear();

	::Test::TestStructSeq received_data;
	::DDS::SampleInfoSeq info_seq;
	::DDS::ReturnCode_t ret = impl_entity->read_next_instance(received_data, info_seq, maxSamples, handle, sampleStates, viewStates, instanceStates);

	if (ret == ::DDS::RETCODE_OK) {
		for (unsigned int i = 0; i < received_data.length(); i++) {
			TestStruct^ data = gcnew TestStruct();
			::OpenDDSharp::DDS::SampleInfo^ sampleInfo = gcnew ::OpenDDSharp::DDS::SampleInfo();

			data->FromNative(received_data[i]);
			sampleInfo->FromNative(info_seq[i]);

			receivedData->Add(data);
			receivedInfo->Add(sampleInfo);
		}
	}

    impl_entity->return_loan(received_data, info_seq);

	return (OpenDDSharp::DDS::ReturnCode)ret;
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::Test::TestStructDataReader::TakeNextInstance(List<TestStruct^>^ receivedData, List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo, OpenDDSharp::DDS::InstanceHandle handle) {
	return  OpenDDSharp::Test::TestStructDataReader::TakeNextInstance(receivedData, receivedInfo, handle, ::DDS::LENGTH_UNLIMITED, OpenDDSharp::DDS::SampleStateMask::AnySampleState, OpenDDSharp::DDS::ViewStateMask::AnyViewState, OpenDDSharp::DDS::InstanceStateMask::AnyInstanceState);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::Test::TestStructDataReader::TakeNextInstance(List<TestStruct^>^ receivedData, List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo, OpenDDSharp::DDS::InstanceHandle handle, System::Int32 maxSamples) {
	return  OpenDDSharp::Test::TestStructDataReader::TakeNextInstance(receivedData, receivedInfo, handle, maxSamples, OpenDDSharp::DDS::SampleStateMask::AnySampleState, OpenDDSharp::DDS::ViewStateMask::AnyViewState, OpenDDSharp::DDS::InstanceStateMask::AnyInstanceState);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::Test::TestStructDataReader::TakeNextInstance(List<TestStruct^>^ receivedData, List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo, OpenDDSharp::DDS::InstanceHandle handle, System::Int32 maxSamples, OpenDDSharp::DDS::ReadCondition^ condition) {
	if (condition == nullptr) {
		return OpenDDSharp::DDS::ReturnCode::BadParameter;
	}

	return OpenDDSharp::Test::TestStructDataReader::TakeNextInstance(receivedData, receivedInfo, handle, maxSamples, condition->SampleStateMask, condition->ViewStateMask, condition->InstanceStateMask);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::Test::TestStructDataReader::TakeNextInstance(List<TestStruct^>^ receivedData, List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo, OpenDDSharp::DDS::InstanceHandle handle, System::Int32 maxSamples, OpenDDSharp::DDS::SampleStateMask sampleStates, OpenDDSharp::DDS::ViewStateMask viewStates, OpenDDSharp::DDS::InstanceStateMask instanceStates) {
    if (receivedData == nullptr || receivedInfo == nullptr) {
		return OpenDDSharp::DDS::ReturnCode::BadParameter;
	}

    receivedData->Clear();
	receivedInfo->Clear();

	::Test::TestStructSeq received_data;
	::DDS::SampleInfoSeq info_seq;
	::DDS::ReturnCode_t ret = impl_entity->take_next_instance(received_data, info_seq, maxSamples, handle, sampleStates, viewStates, instanceStates);

	if (ret == ::DDS::RETCODE_OK) {
		for (unsigned int i = 0; i < received_data.length(); i++) {
			TestStruct^ data = gcnew TestStruct();
			::OpenDDSharp::DDS::SampleInfo^ sampleInfo = gcnew ::OpenDDSharp::DDS::SampleInfo();

			data->FromNative(received_data[i]);
			sampleInfo->FromNative(info_seq[i]);

			receivedData->Add(data);
			receivedInfo->Add(sampleInfo);
		}
	}

    impl_entity->return_loan(received_data, info_seq);

	return (OpenDDSharp::DDS::ReturnCode)ret;
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::Test::TestStructDataReader::ReadNextSample(TestStruct^ data, ::OpenDDSharp::DDS::SampleInfo^ sampleInfo) {
    ::Test::TestStruct* aux = new ::Test::TestStruct();
    ::DDS::SampleInfo sample_info;
	::DDS::ReturnCode_t ret = impl_entity->read_next_sample(*aux, sample_info);

    if (ret == ::DDS::RETCODE_OK) {
	    data->FromNative(*aux);
        sampleInfo->FromNative(sample_info);
    }

	return (OpenDDSharp::DDS::ReturnCode)ret;
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::Test::TestStructDataReader::TakeNextSample(TestStruct^ data, ::OpenDDSharp::DDS::SampleInfo^ sampleInfo) {
    ::Test::TestStruct* aux = new ::Test::TestStruct();
    ::DDS::SampleInfo sample_info;
	::DDS::ReturnCode_t ret = impl_entity->take_next_sample(*aux, sample_info);

    if (ret == ::DDS::RETCODE_OK) {
	    data->FromNative(*aux);
        sampleInfo->FromNative(sample_info);
    }

	return (OpenDDSharp::DDS::ReturnCode)ret;
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::Test::TestStructDataReader::GetKeyValue(TestStruct^ data, OpenDDSharp::DDS::InstanceHandle handle) {
	return (OpenDDSharp::DDS::ReturnCode)impl_entity->get_key_value(data->ToNative(), handle);
};

OpenDDSharp::DDS::InstanceHandle OpenDDSharp::Test::TestStructDataReader::LookupInstance(TestStruct^ instance) {
	return impl_entity->lookup_instance(instance->ToNative());
};

///////////////////////////////////////////////////////////////////////
