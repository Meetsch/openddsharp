//------------------------------------------------------------------------------
// <auto-generated>
// WARNING: THIS FILE IS AUTO-GENERATED. DO NOT MODIFY.
// Generated by C:\Users\morjos\.nuget\packages\openddsharp.idlgenerator\0.1.0\build\..\tools\openddsharp_idl.exe
// DDS version: 3.12
// ACE version: 6.2a_p13
// Running on input file: TestMessage.idl
// </auto-generated>
//------------------------------------------------------------------------------

#include "TestMessageTypeSupport.h"

OpenDDSharp::HelloWorld::Message::Message() {
    m_Content = "";
}

System::String^ OpenDDSharp::HelloWorld::Message::Content::get() {
    return m_Content;
}

void OpenDDSharp::HelloWorld::Message::Content::set(System::String^ value) {
    m_Content = value;
}

::HelloWorld::Message OpenDDSharp::HelloWorld::Message::ToNative() {
    ::HelloWorld::Message ret;
    msclr::interop::marshal_context context;

    if (m_Content != nullptr) {
        ret.Content = context.marshal_as<const char*>(m_Content);
    }
    else {
        ret.Content = "";
    }

    return ret;
}

void  OpenDDSharp::HelloWorld::Message::FromNative(::HelloWorld::Message native) {
    m_Content = gcnew System::String(native.Content);
}

///////////////////////////////////////////////////////////////////////

OpenDDSharp::HelloWorld::MessageTypeSupport::MessageTypeSupport() {
	impl_entity = new ::HelloWorld::MessageTypeSupportImpl();
};

System::String^ OpenDDSharp::HelloWorld::MessageTypeSupport::GetTypeName() {
	return context.marshal_as<System::String^>(impl_entity->get_type_name());
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::HelloWorld::MessageTypeSupport::RegisterType(::OpenDDSharp::DDS::DomainParticipant^ participant, System::String^ typeName) {
    const char * type_name = context.marshal_as<const char*>(typeName);
    ::DDS::DomainParticipant_ptr dp = participant->impl_entity;
	return (OpenDDSharp::DDS::ReturnCode)impl_entity->register_type(dp, type_name);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::HelloWorld::MessageTypeSupport::UnregisterType(::OpenDDSharp::DDS::DomainParticipant^ participant, System::String^ typeName) {
	return (OpenDDSharp::DDS::ReturnCode)impl_entity->unregister_type(participant->impl_entity, context.marshal_as<const char*>(typeName));
};

///////////////////////////////////////////////////////////////////////

OpenDDSharp::HelloWorld::MessageDataWriter::MessageDataWriter(::OpenDDSharp::DDS::DataWriter^ dataWriter) : OpenDDSharp::DDS::DataWriter(dataWriter->impl_entity) {
	impl_entity = ::HelloWorld::MessageDataWriter::_narrow(dataWriter->impl_entity);
};

OpenDDSharp::DDS::InstanceHandle OpenDDSharp::HelloWorld::MessageDataWriter::RegisterInstance(Message^ instance) {
	return impl_entity->register_instance(instance->ToNative());
};

OpenDDSharp::DDS::InstanceHandle OpenDDSharp::HelloWorld::MessageDataWriter::RegisterInstance(Message^ instance, OpenDDSharp::DDS::Timestamp timestamp) {
    ::DDS::Time_t time;	
	time.sec = timestamp.Seconds;
	time.nanosec = timestamp.NanoSeconds;

	return impl_entity->register_instance_w_timestamp(instance->ToNative(), time);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::HelloWorld::MessageDataWriter::UnregisterInstance(Message^ data) {
	return (OpenDDSharp::DDS::ReturnCode)impl_entity->unregister_instance(data->ToNative(), ::DDS::HANDLE_NIL);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::HelloWorld::MessageDataWriter::UnregisterInstance(Message^ data, OpenDDSharp::DDS::InstanceHandle handle) {
	return (OpenDDSharp::DDS::ReturnCode)impl_entity->unregister_instance(data->ToNative(), handle);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::HelloWorld::MessageDataWriter::UnregisterInstance(Message^ data, OpenDDSharp::DDS::InstanceHandle handle, OpenDDSharp::DDS::Timestamp timestamp) {
	::DDS::Time_t time;
	time.sec = timestamp.Seconds;
	time.nanosec = timestamp.NanoSeconds;

	return (OpenDDSharp::DDS::ReturnCode)impl_entity->unregister_instance_w_timestamp(data->ToNative(), handle, time);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::HelloWorld::MessageDataWriter::Write(Message^ data) {
	return (OpenDDSharp::DDS::ReturnCode)impl_entity->write(data->ToNative(), ::DDS::HANDLE_NIL);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::HelloWorld::MessageDataWriter::Write(Message^ data, OpenDDSharp::DDS::InstanceHandle handle) {
	return (OpenDDSharp::DDS::ReturnCode)impl_entity->write(data->ToNative(), handle);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::HelloWorld::MessageDataWriter::Write(Message^ data, OpenDDSharp::DDS::InstanceHandle handle, OpenDDSharp::DDS::Timestamp timestamp) {
	::DDS::Time_t time;
	time.sec = timestamp.Seconds;
	time.nanosec = timestamp.NanoSeconds;

	return (OpenDDSharp::DDS::ReturnCode)impl_entity->write_w_timestamp(data->ToNative(), handle, time);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::HelloWorld::MessageDataWriter::Delete(Message^ data) {
	return (OpenDDSharp::DDS::ReturnCode)impl_entity->dispose(data->ToNative(), ::DDS::HANDLE_NIL);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::HelloWorld::MessageDataWriter::Delete(Message^ data, OpenDDSharp::DDS::InstanceHandle handle) {
	return (OpenDDSharp::DDS::ReturnCode)impl_entity->dispose(data->ToNative(), handle);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::HelloWorld::MessageDataWriter::Delete(Message^ data, OpenDDSharp::DDS::InstanceHandle handle, OpenDDSharp::DDS::Timestamp timestamp) {
	::DDS::Time_t time;
	time.sec = timestamp.Seconds;
	time.nanosec = timestamp.NanoSeconds;

	return (OpenDDSharp::DDS::ReturnCode)impl_entity->dispose_w_timestamp(data->ToNative(), handle, time);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::HelloWorld::MessageDataWriter::GetKeyValue(Message^ data, OpenDDSharp::DDS::InstanceHandle handle) {
	return (OpenDDSharp::DDS::ReturnCode)impl_entity->get_key_value(data->ToNative(), handle);
};

System::Int32 OpenDDSharp::HelloWorld::MessageDataWriter::LookupInstance(Message^ instance) {
	return impl_entity->lookup_instance(instance->ToNative());
};

///////////////////////////////////////////////////////////////////////

OpenDDSharp::HelloWorld::MessageDataReader::MessageDataReader(::OpenDDSharp::DDS::DataReader^ dataReader) : OpenDDSharp::DDS::DataReader(dataReader->impl_entity) {
	impl_entity = ::HelloWorld::MessageDataReader::_narrow(dataReader->impl_entity);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::HelloWorld::MessageDataReader::Read(List<Message^>^ receivedData, List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo) {
	return OpenDDSharp::HelloWorld::MessageDataReader::Read(receivedData, receivedInfo, ::DDS::LENGTH_UNLIMITED, OpenDDSharp::DDS::SampleStateKind::NotReadSampleState, OpenDDSharp::DDS::ViewStateMask::AnyViewState, OpenDDSharp::DDS::InstanceStateMask::AnyInstanceState);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::HelloWorld::MessageDataReader::Read(List<Message^>^ receivedData, List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo, System::Int32 maxSamples) {
	return OpenDDSharp::HelloWorld::MessageDataReader::Read(receivedData, receivedInfo, maxSamples, OpenDDSharp::DDS::SampleStateKind::NotReadSampleState, OpenDDSharp::DDS::ViewStateMask::AnyViewState, OpenDDSharp::DDS::InstanceStateMask::AnyInstanceState);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::HelloWorld::MessageDataReader::Read(List<Message^>^ receivedData, List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo, System::Int32 maxSamples, OpenDDSharp::DDS::ReadCondition^ condition) {
	if (condition == nullptr) {
		return OpenDDSharp::DDS::ReturnCode::BadParameter;
	}

	return OpenDDSharp::HelloWorld::MessageDataReader::Read(receivedData, receivedInfo, maxSamples, condition->GetSampleStateMask(), condition->GetViewStateMask(), condition->GetInstanceStateMask());
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::HelloWorld::MessageDataReader::Read(List<Message^>^ receivedData, List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo, System::Int32 maxSamples, OpenDDSharp::DDS::SampleStateMask sampleStates, OpenDDSharp::DDS::ViewStateMask viewStates, OpenDDSharp::DDS::InstanceStateMask instanceStates) {
    if (receivedData == nullptr || receivedInfo == nullptr) {
		return OpenDDSharp::DDS::ReturnCode::BadParameter;
	}

    receivedData->Clear();
	receivedInfo->Clear();
    
	::HelloWorld::MessageSeq received_data;
	::DDS::SampleInfoSeq info_seq;
	::DDS::ReturnCode_t ret = impl_entity->read(received_data, info_seq, maxSamples, sampleStates, viewStates, instanceStates);

	if (ret == ::DDS::RETCODE_OK) {
		for (unsigned int i = 0; i < received_data.length(); i++) {
			Message^ data = gcnew Message();
			::OpenDDSharp::DDS::SampleInfo^ sampleInfo = gcnew ::OpenDDSharp::DDS::SampleInfo();

			data->FromNative(received_data[i]);
			sampleInfo->FromNative(info_seq[i]);

			receivedData->Add(data);
			receivedInfo->Add(sampleInfo);
		}
	}

    impl_entity->return_loan(received_data, info_seq);

	return (OpenDDSharp::DDS::ReturnCode)ret;
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::HelloWorld::MessageDataReader::Take(List<Message^>^ receivedData, List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo) {
	return OpenDDSharp::HelloWorld::MessageDataReader::Take(receivedData, receivedInfo, ::DDS::LENGTH_UNLIMITED, OpenDDSharp::DDS::SampleStateMask::AnySampleState, OpenDDSharp::DDS::ViewStateMask::AnyViewState, OpenDDSharp::DDS::InstanceStateMask::AnyInstanceState);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::HelloWorld::MessageDataReader::Take(List<Message^>^ receivedData, List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo, System::Int32 maxSamples) {
	return OpenDDSharp::HelloWorld::MessageDataReader::Take(receivedData, receivedInfo, maxSamples, OpenDDSharp::DDS::SampleStateMask::AnySampleState, OpenDDSharp::DDS::ViewStateMask::AnyViewState, OpenDDSharp::DDS::InstanceStateMask::AnyInstanceState);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::HelloWorld::MessageDataReader::Take(List<Message^>^ receivedData, List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo, System::Int32 maxSamples, OpenDDSharp::DDS::ReadCondition^ condition) {
	if (condition == nullptr) {
		return OpenDDSharp::DDS::ReturnCode::BadParameter;
	}

	return OpenDDSharp::HelloWorld::MessageDataReader::Take(receivedData, receivedInfo, maxSamples, condition->GetSampleStateMask(), condition->GetViewStateMask(), condition->GetInstanceStateMask());
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::HelloWorld::MessageDataReader::Take(List<Message^>^ receivedData, List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo, System::Int32 maxSamples, OpenDDSharp::DDS::SampleStateMask sampleStates, OpenDDSharp::DDS::ViewStateMask viewStates, OpenDDSharp::DDS::InstanceStateMask instanceStates) {
    if (receivedData == nullptr || receivedInfo == nullptr) {
		return OpenDDSharp::DDS::ReturnCode::BadParameter;
	}

    receivedData->Clear();
	receivedInfo->Clear();

	::HelloWorld::MessageSeq received_data;
	::DDS::SampleInfoSeq info_seq;
	::DDS::ReturnCode_t ret = impl_entity->take(received_data, info_seq, maxSamples, sampleStates, viewStates, instanceStates);

	if (ret == ::DDS::RETCODE_OK) {
		for (unsigned int i = 0; i < received_data.length(); i++) {
			Message^ data = gcnew Message();
			::OpenDDSharp::DDS::SampleInfo^ sampleInfo = gcnew ::OpenDDSharp::DDS::SampleInfo();

			data->FromNative(received_data[i]);
			sampleInfo->FromNative(info_seq[i]);

			receivedData->Add(data);
			receivedInfo->Add(sampleInfo);
		}
	}

    impl_entity->return_loan(received_data, info_seq);

	return (OpenDDSharp::DDS::ReturnCode)ret;
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::HelloWorld::MessageDataReader::ReadInstance(List<Message^>^ receivedData, List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo, OpenDDSharp::DDS::InstanceHandle handle) {
	return  OpenDDSharp::HelloWorld::MessageDataReader::ReadInstance(receivedData, receivedInfo, handle, ::DDS::LENGTH_UNLIMITED, OpenDDSharp::DDS::SampleStateKind::NotReadSampleState, OpenDDSharp::DDS::ViewStateMask::AnyViewState, OpenDDSharp::DDS::InstanceStateMask::AnyInstanceState);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::HelloWorld::MessageDataReader::ReadInstance(List<Message^>^ receivedData, List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo, OpenDDSharp::DDS::InstanceHandle handle, System::Int32 maxSamples) {
	return  OpenDDSharp::HelloWorld::MessageDataReader::ReadInstance(receivedData, receivedInfo, handle, maxSamples, OpenDDSharp::DDS::SampleStateKind::NotReadSampleState, OpenDDSharp::DDS::ViewStateMask::AnyViewState, OpenDDSharp::DDS::InstanceStateMask::AnyInstanceState);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::HelloWorld::MessageDataReader::ReadInstance(List<Message^>^ receivedData, List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo, OpenDDSharp::DDS::InstanceHandle handle, System::Int32 maxSamples, OpenDDSharp::DDS::ReadCondition^ condition) {
	if (condition == nullptr) {
		return OpenDDSharp::DDS::ReturnCode::BadParameter;
	}

	return OpenDDSharp::HelloWorld::MessageDataReader::ReadInstance(receivedData, receivedInfo, handle, maxSamples, condition->GetSampleStateMask(), condition->GetViewStateMask(), condition->GetInstanceStateMask());
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::HelloWorld::MessageDataReader::ReadInstance(List<Message^>^ receivedData, List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo, OpenDDSharp::DDS::InstanceHandle handle, System::Int32 maxSamples, OpenDDSharp::DDS::SampleStateMask sampleStates, OpenDDSharp::DDS::ViewStateMask viewStates, OpenDDSharp::DDS::InstanceStateMask instanceStates) {
    if (receivedData == nullptr || receivedInfo == nullptr) {
		return OpenDDSharp::DDS::ReturnCode::BadParameter;
	}

    receivedData->Clear();
	receivedInfo->Clear();

	::HelloWorld::MessageSeq received_data;
	::DDS::SampleInfoSeq info_seq;
	::DDS::ReturnCode_t ret = impl_entity->read_instance(received_data, info_seq, maxSamples, handle, sampleStates, viewStates, instanceStates);

	if (ret == ::DDS::RETCODE_OK) {
		for (unsigned int i = 0; i < received_data.length(); i++) {
			Message^ data = gcnew Message();
			::OpenDDSharp::DDS::SampleInfo^ sampleInfo = gcnew ::OpenDDSharp::DDS::SampleInfo();

			data->FromNative(received_data[i]);
			sampleInfo->FromNative(info_seq[i]);

			receivedData->Add(data);
			receivedInfo->Add(sampleInfo);
		}
	}

    impl_entity->return_loan(received_data, info_seq);

	return (OpenDDSharp::DDS::ReturnCode)ret;
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::HelloWorld::MessageDataReader::TakeInstance(List<Message^>^ receivedData, List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo, OpenDDSharp::DDS::InstanceHandle handle) {
	return  OpenDDSharp::HelloWorld::MessageDataReader::TakeInstance(receivedData, receivedInfo, handle, ::DDS::LENGTH_UNLIMITED, OpenDDSharp::DDS::SampleStateMask::AnySampleState, OpenDDSharp::DDS::ViewStateMask::AnyViewState, OpenDDSharp::DDS::InstanceStateMask::AnyInstanceState);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::HelloWorld::MessageDataReader::TakeInstance(List<Message^>^ receivedData, List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo, OpenDDSharp::DDS::InstanceHandle handle, System::Int32 maxSamples) {
	return  OpenDDSharp::HelloWorld::MessageDataReader::TakeInstance(receivedData, receivedInfo, handle, maxSamples, OpenDDSharp::DDS::SampleStateMask::AnySampleState, OpenDDSharp::DDS::ViewStateMask::AnyViewState, OpenDDSharp::DDS::InstanceStateMask::AnyInstanceState);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::HelloWorld::MessageDataReader::TakeInstance(List<Message^>^ receivedData, List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo, OpenDDSharp::DDS::InstanceHandle handle, System::Int32 maxSamples, OpenDDSharp::DDS::ReadCondition^ condition) {
	if (condition == nullptr) {
		return OpenDDSharp::DDS::ReturnCode::BadParameter;
	}

	return OpenDDSharp::HelloWorld::MessageDataReader::TakeInstance(receivedData, receivedInfo, handle, maxSamples, condition->GetSampleStateMask(), condition->GetViewStateMask(), condition->GetInstanceStateMask());
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::HelloWorld::MessageDataReader::TakeInstance(List<Message^>^ receivedData, List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo, OpenDDSharp::DDS::InstanceHandle handle, System::Int32 maxSamples, OpenDDSharp::DDS::SampleStateMask sampleStates, OpenDDSharp::DDS::ViewStateMask viewStates, OpenDDSharp::DDS::InstanceStateMask instanceStates) {
    if (receivedData == nullptr || receivedInfo == nullptr) {
		return OpenDDSharp::DDS::ReturnCode::BadParameter;
	}

    receivedData->Clear();
	receivedInfo->Clear();

	::HelloWorld::MessageSeq received_data;
	::DDS::SampleInfoSeq info_seq;
	::DDS::ReturnCode_t ret = impl_entity->take_instance(received_data, info_seq, maxSamples, handle, sampleStates, viewStates, instanceStates);

	if (ret == ::DDS::RETCODE_OK) {
		for (unsigned int i = 0; i < received_data.length(); i++) {
			Message^ data = gcnew Message();
			::OpenDDSharp::DDS::SampleInfo^ sampleInfo = gcnew ::OpenDDSharp::DDS::SampleInfo();

			data->FromNative(received_data[i]);
			sampleInfo->FromNative(info_seq[i]);

			receivedData->Add(data);
			receivedInfo->Add(sampleInfo);
		}
	}

    impl_entity->return_loan(received_data, info_seq);

	return (OpenDDSharp::DDS::ReturnCode)ret;
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::HelloWorld::MessageDataReader::ReadNextInstance(List<Message^>^ receivedData, List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo, OpenDDSharp::DDS::InstanceHandle handle) {
	return  OpenDDSharp::HelloWorld::MessageDataReader::ReadNextInstance(receivedData, receivedInfo, handle, ::DDS::LENGTH_UNLIMITED, OpenDDSharp::DDS::SampleStateKind::NotReadSampleState, OpenDDSharp::DDS::ViewStateMask::AnyViewState, OpenDDSharp::DDS::InstanceStateMask::AnyInstanceState);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::HelloWorld::MessageDataReader::ReadNextInstance(List<Message^>^ receivedData, List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo, OpenDDSharp::DDS::InstanceHandle handle, System::Int32 maxSamples) {
	return  OpenDDSharp::HelloWorld::MessageDataReader::ReadNextInstance(receivedData, receivedInfo, handle, maxSamples, OpenDDSharp::DDS::SampleStateKind::NotReadSampleState, OpenDDSharp::DDS::ViewStateMask::AnyViewState, OpenDDSharp::DDS::InstanceStateMask::AnyInstanceState);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::HelloWorld::MessageDataReader::ReadNextInstance(List<Message^>^ receivedData, List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo, OpenDDSharp::DDS::InstanceHandle handle, System::Int32 maxSamples, OpenDDSharp::DDS::ReadCondition^ condition) {
	if (condition == nullptr) {
		return OpenDDSharp::DDS::ReturnCode::BadParameter;
	}

	return OpenDDSharp::HelloWorld::MessageDataReader::ReadNextInstance(receivedData, receivedInfo, handle, maxSamples, condition->GetSampleStateMask(), condition->GetViewStateMask(), condition->GetInstanceStateMask());
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::HelloWorld::MessageDataReader::ReadNextInstance(List<Message^>^ receivedData, List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo, OpenDDSharp::DDS::InstanceHandle handle, System::Int32 maxSamples, OpenDDSharp::DDS::SampleStateMask sampleStates, OpenDDSharp::DDS::ViewStateMask viewStates, OpenDDSharp::DDS::InstanceStateMask instanceStates) {
    if (receivedData == nullptr || receivedInfo == nullptr) {
		return OpenDDSharp::DDS::ReturnCode::BadParameter;
	}

    receivedData->Clear();
	receivedInfo->Clear();

	::HelloWorld::MessageSeq received_data;
	::DDS::SampleInfoSeq info_seq;
	::DDS::ReturnCode_t ret = impl_entity->read_next_instance(received_data, info_seq, maxSamples, handle, sampleStates, viewStates, instanceStates);

	if (ret == ::DDS::RETCODE_OK) {
		for (unsigned int i = 0; i < received_data.length(); i++) {
			Message^ data = gcnew Message();
			::OpenDDSharp::DDS::SampleInfo^ sampleInfo = gcnew ::OpenDDSharp::DDS::SampleInfo();

			data->FromNative(received_data[i]);
			sampleInfo->FromNative(info_seq[i]);

			receivedData->Add(data);
			receivedInfo->Add(sampleInfo);
		}
	}

    impl_entity->return_loan(received_data, info_seq);

	return (OpenDDSharp::DDS::ReturnCode)ret;
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::HelloWorld::MessageDataReader::TakeNextInstance(List<Message^>^ receivedData, List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo, OpenDDSharp::DDS::InstanceHandle handle) {
	return  OpenDDSharp::HelloWorld::MessageDataReader::TakeNextInstance(receivedData, receivedInfo, handle, ::DDS::LENGTH_UNLIMITED, OpenDDSharp::DDS::SampleStateMask::AnySampleState, OpenDDSharp::DDS::ViewStateMask::AnyViewState, OpenDDSharp::DDS::InstanceStateMask::AnyInstanceState);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::HelloWorld::MessageDataReader::TakeNextInstance(List<Message^>^ receivedData, List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo, OpenDDSharp::DDS::InstanceHandle handle, System::Int32 maxSamples) {
	return  OpenDDSharp::HelloWorld::MessageDataReader::TakeNextInstance(receivedData, receivedInfo, handle, maxSamples, OpenDDSharp::DDS::SampleStateMask::AnySampleState, OpenDDSharp::DDS::ViewStateMask::AnyViewState, OpenDDSharp::DDS::InstanceStateMask::AnyInstanceState);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::HelloWorld::MessageDataReader::TakeNextInstance(List<Message^>^ receivedData, List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo, OpenDDSharp::DDS::InstanceHandle handle, System::Int32 maxSamples, OpenDDSharp::DDS::ReadCondition^ condition) {
	if (condition == nullptr) {
		return OpenDDSharp::DDS::ReturnCode::BadParameter;
	}

	return OpenDDSharp::HelloWorld::MessageDataReader::TakeNextInstance(receivedData, receivedInfo, handle, maxSamples, condition->GetSampleStateMask(), condition->GetViewStateMask(), condition->GetInstanceStateMask());
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::HelloWorld::MessageDataReader::TakeNextInstance(List<Message^>^ receivedData, List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo, OpenDDSharp::DDS::InstanceHandle handle, System::Int32 maxSamples, OpenDDSharp::DDS::SampleStateMask sampleStates, OpenDDSharp::DDS::ViewStateMask viewStates, OpenDDSharp::DDS::InstanceStateMask instanceStates) {
    if (receivedData == nullptr || receivedInfo == nullptr) {
		return OpenDDSharp::DDS::ReturnCode::BadParameter;
	}

    receivedData->Clear();
	receivedInfo->Clear();

	::HelloWorld::MessageSeq received_data;
	::DDS::SampleInfoSeq info_seq;
	::DDS::ReturnCode_t ret = impl_entity->take_next_instance(received_data, info_seq, maxSamples, handle, sampleStates, viewStates, instanceStates);

	if (ret == ::DDS::RETCODE_OK) {
		for (unsigned int i = 0; i < received_data.length(); i++) {
			Message^ data = gcnew Message();
			::OpenDDSharp::DDS::SampleInfo^ sampleInfo = gcnew ::OpenDDSharp::DDS::SampleInfo();

			data->FromNative(received_data[i]);
			sampleInfo->FromNative(info_seq[i]);

			receivedData->Add(data);
			receivedInfo->Add(sampleInfo);
		}
	}

    impl_entity->return_loan(received_data, info_seq);

	return (OpenDDSharp::DDS::ReturnCode)ret;
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::HelloWorld::MessageDataReader::ReadNextSample(Message^ data, ::OpenDDSharp::DDS::SampleInfo^ sampleInfo) {
    ::HelloWorld::Message* aux = new ::HelloWorld::Message();
    ::DDS::SampleInfo sample_info;
	::DDS::ReturnCode_t ret = impl_entity->read_next_sample(*aux, sample_info);

    if (ret == ::DDS::RETCODE_OK) {
	    data->FromNative(*aux);
        sampleInfo->FromNative(sample_info);
    }

	return (OpenDDSharp::DDS::ReturnCode)ret;
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::HelloWorld::MessageDataReader::TakeNextSample(Message^ data, ::OpenDDSharp::DDS::SampleInfo^ sampleInfo) {
    ::HelloWorld::Message* aux = new ::HelloWorld::Message();
    ::DDS::SampleInfo sample_info;
	::DDS::ReturnCode_t ret = impl_entity->take_next_sample(*aux, sample_info);

    if (ret == ::DDS::RETCODE_OK) {
	    data->FromNative(*aux);
        sampleInfo->FromNative(sample_info);
    }

	return (OpenDDSharp::DDS::ReturnCode)ret;
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::HelloWorld::MessageDataReader::GetKeyValue(Message^ data, OpenDDSharp::DDS::InstanceHandle handle) {
	return (OpenDDSharp::DDS::ReturnCode)impl_entity->get_key_value(data->ToNative(), handle);
};

OpenDDSharp::DDS::InstanceHandle OpenDDSharp::HelloWorld::MessageDataReader::LookupInstance(Message^ instance) {
	return impl_entity->lookup_instance(instance->ToNative());
};

///////////////////////////////////////////////////////////////////////
