diff --git a/dds/DCPS/DataReaderImpl.cpp b/dds/DCPS/DataReaderImpl.cpp
index 794e3cac9..5985067f1 100644
--- a/dds/DCPS/DataReaderImpl.cpp
+++ b/dds/DCPS/DataReaderImpl.cpp
@@ -120,19 +120,18 @@ DataReaderImpl::DataReaderImpl()
   periodic_monitor_ = TheServiceParticipant->monitor_factory_->create_data_reader_periodic_monitor(this);
 }
 
+void
+DataReaderImpl::LivelinessTimer::check_liveliness()
+{
+  CheckLivelinessCommand c(this);
+  execute_or_enqueue(c);
+}
+
 // This method is called when there are no longer any reference to the
 // the servant.
 DataReaderImpl::~DataReaderImpl()
 {
   DBG_ENTRY_LVL("DataReaderImpl","~DataReaderImpl",6);
-
-#ifndef OPENDDS_NO_OWNERSHIP_KIND_EXCLUSIVE
-  OwnershipManagerPtr owner_manager = this->ownership_manager();
-  if (owner_manager) {
-    owner_manager->unregister_reader(topic_servant_->type_name(), this);
-  }
-#endif
-
 }
 
 // this method is called when delete_datareader is called.
@@ -144,6 +143,22 @@ DataReaderImpl::cleanup()
   // deleted
   set_listener(0, NO_STATUS_MASK);
 
+#ifndef OPENDDS_NO_OWNERSHIP_KIND_EXCLUSIVE
+  OwnershipManagerPtr owner_manager = this->ownership_manager();
+  if (owner_manager) {
+  owner_manager->unregister_reader(topic_servant_->type_name(), this);
+  }
+#endif
+
+  topic_servant_ = 0;
+
+#ifndef OPENDDS_NO_CONTENT_FILTERED_TOPIC
+  content_filtered_topic_ = 0;
+#endif
+
+#ifndef OPENDDS_NO_MULTI_TOPIC
+  multi_topic_ = 0;
+#endif
 
 }
 
@@ -855,30 +870,32 @@ DDS::ReturnCode_t DataReaderImpl::set_qos(
     if (qos_ == qos)
       return DDS::RETCODE_OK;
 
-    if (!Qos_Helper::changeable(qos_, qos) && enabled_ == true) {
-      return DDS::RETCODE_IMMUTABLE_POLICY;
+    if (enabled_ == true) {
+      if (!Qos_Helper::changeable(qos_, qos)) {
+        return DDS::RETCODE_IMMUTABLE_POLICY;
 
-    } else {
-      Discovery_rch disco = TheServiceParticipant->get_discovery(domain_id_);
-      DDS::SubscriberQos subscriberQos;
-
-      RcHandle<SubscriberImpl> subscriber = get_subscriber_servant();
-      bool status = false;
-      if (subscriber) {
-        subscriber->get_qos(subscriberQos);
-        status =
-          disco->update_subscription_qos(
+      } else {
+        Discovery_rch disco = TheServiceParticipant->get_discovery(domain_id_);
+        DDS::SubscriberQos subscriberQos;
+
+        RcHandle<SubscriberImpl> subscriber = get_subscriber_servant();
+        bool status = false;
+        if (subscriber) {
+          subscriber->get_qos(subscriberQos);
+          status =
+            disco->update_subscription_qos(
               domain_id_,
               dp_id_,
               this->subscription_id_,
               qos,
               subscriberQos);
-      }
-      if (!status) {
-        ACE_ERROR_RETURN((LM_ERROR,
-            ACE_TEXT("(%P|%t) DataReaderImpl::set_qos, ")
-            ACE_TEXT("qos not updated. \n")),
-            DDS::RETCODE_ERROR);
+        }
+        if (!status) {
+          ACE_ERROR_RETURN((LM_ERROR,
+                            ACE_TEXT("(%P|%t) DataReaderImpl::set_qos, ")
+                            ACE_TEXT("qos not updated. \n")),
+                            DDS::RETCODE_ERROR);
+        }
       }
     }
 
@@ -3140,6 +3157,14 @@ DataReaderImpl::get_cf_topic() const
 }
 #endif
 
+#ifndef OPENDDS_NO_MULTI_TOPIC
+void
+DataReaderImpl::enable_multi_topic(MultiTopicImpl* mt)
+{
+  multi_topic_ = mt;
+}
+#endif
+
 #ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
 
 void
